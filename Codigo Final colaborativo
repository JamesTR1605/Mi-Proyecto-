#include <iostream>
#include <string>

using namespace std;

// Funciones de validación
int leerEnteroValido(const string& mensaje, int min = INT_MIN, int max = INT_MAX) {
    int valor;
    while (true) {
        cout << mensaje;
        if (cin >> valor) {
            if (valor >= min && valor <= max) {
                return valor;
            } else {
                cout << "Error: El valor debe estar entre " << min << " y " << max << ".\n";
            }
        } else {
            cout << "Error: Ingrese un numero valido.\n";
            cin.clear();
            cin.ignore(10000, '\n');
        }
    }
}

string leerStringNoVacio(const string& mensaje) {
    string texto;
    while (true) {
        cout << mensaje;
        getline(cin, texto);
        if (!texto.empty() && texto.find_first_not_of(" \t\n\r") != string::npos) {
            return texto;
        }
        cout << "Error: El texto no puede estar vacio.\n";
    }
}

int leerOpcionMenu(int min, int max) {
    return leerEnteroValido("", min, max);
}

// Estructura de Proceso
struct Proceso {
    int id;
    string nombre;
    int prioridad;
    Proceso* siguiente;
    
    // Constructor para facilitar la creación
    Proceso(int _id, string _nombre, int _prioridad) 
        : id(_id), nombre(_nombre), prioridad(_prioridad), siguiente(NULL) {}
};

// Lista enlazada para el Gestor de Procesos
class GestorProcesos {
private:
    Proceso* cabeza;

public:
    // Constructor
    GestorProcesos() : cabeza(NULL) {}
    
    // Destructor para liberar memoria
    ~GestorProcesos() {
        while (cabeza != NULL) {
            Proceso* temp = cabeza;
            cabeza = cabeza->siguiente;
            delete temp;
        }
    }

    void insertar(int id, string nombre, int prioridad) {
        // Verificar si el ID ya existe
        if (buscar(id) != NULL) {
            cout << "Error: Ya existe un proceso con ID " << id << ".\n";
            return;
        }
        
        Proceso* nuevo = new Proceso(id, nombre, prioridad);
        nuevo->siguiente = cabeza;
        cabeza = nuevo;
        cout << "Proceso insertado exitosamente.\n";
    }

    void eliminar(int id) {
        if (cabeza == NULL) {
            cout << "No hay procesos para eliminar.\n";
            return;
        }
        
        Proceso* actual = cabeza;
        Proceso* anterior = NULL;
        
        while (actual != NULL) {
            if (actual->id == id) {
                if (anterior == NULL) {
                    cabeza = actual->siguiente;
                } else {
                    anterior->siguiente = actual->siguiente;
                }
                delete actual;
                cout << "Proceso con ID " << id << " eliminado exitosamente.\n";
                return;
            }
            anterior = actual;
            actual = actual->siguiente;
        }
        cout << "Proceso con ID " << id << " no encontrado.\n";
    }

    Proceso* buscar(int id) {
        Proceso* actual = cabeza;
        while (actual != NULL) {
            if (actual->id == id)
                return actual;
            actual = actual->siguiente;
        }
        return NULL;
    }

    Proceso* buscar(const string& nombre) {
        Proceso* actual = cabeza;
        while (actual != NULL) {
            if (actual->nombre == nombre)
                return actual;
            actual = actual->siguiente;
        }
        return NULL;
    }

    void modificarPrioridad(int id, int nuevaPrioridad) {
        if (nuevaPrioridad < 1 || nuevaPrioridad > 10) {
            cout << "Error: La prioridad debe estar entre 1 y 10.\n";
            return;
        }
        
        Proceso* p = buscar(id);
        if (p != NULL) {
            int prioridadAnterior = p->prioridad;
            p->prioridad = nuevaPrioridad;
            cout << "Prioridad del proceso ID " << id << " modificada de " 
                 << prioridadAnterior << " a " << nuevaPrioridad << ".\n";
        } else {
            cout << "Proceso con ID " << id << " no encontrado.\n";
        }
    }

    void mostrarProcesos() {
        if (cabeza == NULL) {
            cout << "\nNo hay procesos registrados.\n";
            return;
        }
        
        Proceso* actual = cabeza;
        cout << "\n=== Lista de procesos ===\n";
        while (actual != NULL) {
            cout << "ID: " << actual->id 
                 << ", Nombre: " << actual->nombre 
                 << ", Prioridad: " << actual->prioridad << endl;
            actual = actual->siguiente;
        }
        cout << "========================\n";
    }
    
    bool estaVacio() const {
        return cabeza == NULL;
    }
};

// Planificador de CPU con cola personalizada ordenada por prioridad
class PlanificadorCPU {
private:
    struct NodoCola {
        Proceso* proceso;
        NodoCola* siguiente;
        
        NodoCola(Proceso* p) : proceso(p), siguiente(NULL) {}
    };
    
    NodoCola* cabeza;
    int size;

public:
    PlanificadorCPU() : cabeza(NULL), size(0) {}
    
    ~PlanificadorCPU() {
        while (cabeza != NULL) {
            NodoCola* temp = cabeza;
            cabeza = cabeza->siguiente;
            delete temp;
        }
    }

    void encolar(Proceso* p) {
        if (p == NULL) {
            cout << "Error: No se puede encolar un proceso nulo.\n";
            return;
        }
        
        NodoCola* nuevo = new NodoCola(p);
        
        // Insertar ordenado por prioridad (mayor prioridad primero)
        if (cabeza == NULL || p->prioridad > cabeza->proceso->prioridad) {
            nuevo->siguiente = cabeza;
            cabeza = nuevo;
        } else {
            NodoCola* actual = cabeza;
            while (actual->siguiente != NULL && 
                   actual->siguiente->proceso->prioridad >= p->prioridad) {
                actual = actual->siguiente;
            }
            nuevo->siguiente = actual->siguiente;
            actual->siguiente = nuevo;
        }
        
        size++;
        cout << "Proceso '" << p->nombre << "' (ID: " << p->id 
             << ") encolado para ejecución.\n";
    }

    void ejecutar() {
        if (cabeza == NULL) {
            cout << "No hay procesos en cola para ejecutar.\n";
            return;
        }
