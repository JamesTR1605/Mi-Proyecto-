#include <iostream>
#include <string>
#include <stack>

using namespace std;

// Estructura de Proceso
struct Proceso {
    int id;
    string nombre;
    int prioridad;
    Proceso* siguiente;
    
    // Constructor para facilitar la creación
    Proceso(int _id, string _nombre, int _prioridad) 
        : id(_id), nombre(_nombre), prioridad(_prioridad), siguiente(NULL) {}
};

// Lista enlazada para el Gestor de Procesos
class GestorProcesos {
private:
    Proceso* cabeza;

public:
    // Constructor
    GestorProcesos() : cabeza(NULL) {}
    
    // Destructor para liberar memoria
    ~GestorProcesos() {
        while (cabeza != NULL) {
            Proceso* temp = cabeza;
            cabeza = cabeza->siguiente;
            delete temp;
        }
    }

    void insertar(int id, string nombre, int prioridad) {
        // Verificar si el ID ya existe
        if (buscar(id) != NULL) {
            cout << "Error: Ya existe un proceso con ID " << id << ".\n";
            return;
        }
        
        Proceso* nuevo = new Proceso(id, nombre, prioridad);
        nuevo->siguiente = cabeza;
        cabeza = nuevo;
        cout << "Proceso insertado exitosamente.\n";
    }

    void eliminar(int id) {
        if (cabeza == NULL) {
            cout << "No hay procesos para eliminar.\n";
            return;
        }
        
        Proceso* actual = cabeza;
        Proceso* anterior = NULL;
        
        while (actual != NULL) {
            if (actual->id == id) {
                if (anterior == NULL) {
                    cabeza = actual->siguiente;
                } else {
                    anterior->siguiente = actual->siguiente;
                }
                delete actual;
                cout << "Proceso con ID " << id << " eliminado exitosamente.\n";
                return;
            }
            anterior = actual;
            actual = actual->siguiente;
        }
        cout << "Proceso con ID " << id << " no encontrado.\n";
    }

    Proceso* buscar(int id) {
        Proceso* actual = cabeza;
        while (actual != NULL) {
            if (actual->id == id)
                return actual;
            actual = actual->siguiente;
        }
        return NULL;
    }

    Proceso* buscar(const string& nombre) {
        Proceso* actual = cabeza;
        while (actual != NULL) {
            if (actual->nombre == nombre)
                return actual;
            actual = actual->siguiente;
        }
        return NULL;
    }

    void modificarPrioridad(int id, int nuevaPrioridad) {
        if (nuevaPrioridad < 1 || nuevaPrioridad > 10) {
            cout << "Error: La prioridad debe estar entre 1 y 10.\n";
            return;
        }
        
        Proceso* p = buscar(id);
        if (p != NULL) {
            int prioridadAnterior = p->prioridad;
            p->prioridad = nuevaPrioridad;
            cout << "Prioridad del proceso ID " << id << " modificada de " 
                 << prioridadAnterior << " a " << nuevaPrioridad << ".\n";
        } else {
            cout << "Proceso con ID " << id << " no encontrado.\n";
        }
    }

// Gestor de Memoria con pila
class GestorMemoria {
private:
    stack<int> pilaMemoria;
    int contador;
    static const int MAX_BLOQUES = 100; // Límite máximo de bloques

public:
    GestorMemoria() : contador(0) {}

    void asignarMemoria() {
        if (contador >= MAX_BLOQUES) {
            cout << "Error: Se ha alcanzado el límite máximo de bloques de memoria ("
                 << MAX_BLOQUES << ").\n";
            return;
        }
        
        ++contador;
        pilaMemoria.push(contador);
        cout << "Bloque de memoria #" << contador << " asignado exitosamente.\n";
    }

    void liberarMemoria() {
        if (pilaMemoria.empty()) {
            cout << "No hay bloques de memoria asignados para liberar.\n";
            return;
        }
        
        int bloqueLiberated = pilaMemoria.top();
        pilaMemoria.pop();
        cout << "Bloque de memoria #" << bloqueLiberated << " liberado exitosamente.\n";
    }
